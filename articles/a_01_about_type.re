
= 型


型とは、SQLにおけるデータの取り扱いに関する形式のことです。
これまで勉強会の中でデータを見てきたときに、大雑把にいうと、3種類の型を扱ってきました。

 * 数値
 * 文字列
 * 日時


== 型の種類


@<href>{https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_Supported_data_types.html,Redshiftのデータ型}

//table[tbl1][]{
カテゴリ	データ型	説明
-----------------
数値	SMALLINT	2バイト整数(-32768〜+32767)
数値	INTEGER	4バイト整数(-2147483648～+2147483647)
数値	BIGINTEGER	8バイト整数(-9223372036854775808～9223372036854775807)
数値	DECIMAL	精度の選択が可能な真数(最大38桁の精度)
数値	REAL	単精度浮動小数点数(有効精度6桁)
数値	DOUBLE PRECISION	倍精度浮動小数点数(有効精度15桁)
数値	BOOLEAN	真偽値
文字列	CHAR	固定長キャラクタ文字列
文字列	VARCHAR	可変長キャラクタ文字列
日時	DATE	カレンダー日付
日時	TIMESTAMP	日付と時刻(タイムゾーンなし)
日時	TIMESTAMPTZ	日付と時刻(タイムゾーンあり)
//}

=== 数値


//image[integer_and_real][整数と実数]{
//}




いわゆる数字なのですが、少し扱いが面倒なものがあります。
数値も大きく分けると、整数と実数に分けられています。

 * 整数 … 小数点以下のない数字です。
 * 実数 … 小数点以下もある数字です。

//table[tbl2][]{
カテゴリ	データ型	説明
-----------------
数値	SMALLINT	2バイト整数(-32768〜+32767)
数値	INTEGER	4バイト整数(-2147483648～+2147483647)
数値	BIGINTEGER	8バイト整数(-9223372036854775808～9223372036854775807)
数値	DECIMAL	精度の選択が可能な真数(最大38桁の精度)
数値	REAL	単精度浮動小数点数(有効精度6桁)
数値	DOUBLE PRECISION	倍精度浮動小数点数(有効精度15桁)
数値	BOOLEAN	真偽値
//}


気をつける必要があるところとして、割り算の結果が変わります。
整数同士の場合、結果は整数になります。
それ以外の場合は実数になります。



つまり、 @<tt>{1 / 3} は @<tt>{0} になりますが、@<tt>{1.0 / 3.0} は @<tt>{0.33…} になります。
整数同士の計算で @<tt>{0.33…} を得たいときには、@<tt>{Column1::Real / Column2} のように意図的にいずれかの値に型を指定してください。（@<href>{https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/r_numeric_computations201.html,こちら}にちゃんとした説明がありますので、よかったらみてみてください。）


//emlist[][sql]{
WITH Table1 AS (
  SELECT
    1 AS Column1
  , 3 AS Column2
)

SELECT
  Column1
, Column2
, Column1 / Column2
, Column1::Real / Column2
FROM Table1
;
//}


この挙動の一番やっかいなところは、この計算はエラーが起きないことです。
普段から結果を確認するようにしましょう。


=== 文字


//image[character_string][文字列]{
//}




文字が列をなして並んでいるので、文字列です。言葉に馴染みがないと思いますが、よく使われるので気に留めておいてください。



文字の集まりなので、3文字目から6文字目を抜き出す、といったような操作ができます。

//table[tbl3][]{
カテゴリ	データ型	説明
-----------------
文字列	CHAR	固定長キャラクタ文字列
文字列	VARCHAR	可変長キャラクタ文字列
//}

==== NULLと空文字列


文字列は文字が並んだものです。例えば@<tt>{'CAT'}のようなものです。文字がひとつも入っていない@<tt>{''}のような場合も考えられます。
@<tt>{''}は空文字列といったりします。



SQLでは空っぽを表す@<tt>{NULL}というものもありますが、@<tt>{''}とは違います。後述のクエリを実行してみてください。


//emlist[][sql]{
SELECT
  NULL = '' AS NULLと空文字列はおなじ？
, '' = NULL AS 空文字列とNULLはおなじ？
, NULL = NULL AS NULLとNULLはおなじ？
, '' = '' AS 空文字列と空文字列はおなじ？
, NULL IS NULL AS NULLはNULL？
, '' IS NULL AS 空文字列はNULL？
;
//}


@<tt>{NULL = ''}や@<tt>{'' IS NULL}が@<tt>{True}になりません。比較するときに注意してください。
空文字列はあくまでも文字列であり、中身はないけど器はあります。NULLのほうは器すらないようなものです。


==== ASCII文字とマルチバイト文字

===== ASCII文字


8bitつまり2^8=256で表せる文字セットで、アルファベットや数字、記号、改行などの制御文字で構成されています。
だいたいのコンピュータで使える文字です。


===== マルチバイト文字


いろんな国でいろんな言語、いろんな文字を使っています。当然、8bit(1Byte)の256通りでは全然足りません。漢字は第一水準で約3000、第二水準まで含めると約6000あります。日本の使いやすい漢字でさえこれだけあるのですから、世界の文字となったら全く足りないことはわかるでしょうか。
ですので、複数Byteを使うことで表現しています。


==== 固定文字列を@<tt>{'}で囲むのはなぜ？


SQLや多くのプログラミング言語はこれで書かれます。
SQLとして書かれた文字列と、SQL内の固定値として書かれた文字列を区別することは難しいです。そこで区別するために、固定値のほうは@<tt>{'}で囲みます。後述のような@<tt>{SELECT * FROM Table}という結果を返したいクエリのときに@<tt>{'}がないと解釈が難しいことがわかるでしょうか。


//emlist[][sql]{
SELECT 'SELECT * FROM Table;';
//}


数値の場合は囲まないのですが、これはSQLの構文上、数値で始まるものがなく、区別がつくからでしょう。


=== 日時


日時を表す表現は3つ、日付だけの@<tt>{DATE}と、日付と時間の@<tt>{TIMESTAMP}とタイムゾーン付き日付と時間の@<tt>{TIMESTAMPTZ}です。
保存する際の記憶領域のサイズの問題で分けられたのかもしれません。



//image[timezone][タイムゾーン]{
//}


//table[tbl4][]{
カテゴリ	データ型	説明
-----------------
日時	DATE	カレンダー日付
日時	TIMESTAMP	日付と時刻(タイムゾーンなし)
日時	TIMESTAMPTZ	日付と時刻(タイムゾーンあり)
//}

==== UNIX時間


日時関連のような名前がついているのに、大きな数字が入っているカラムがあります。
それはおそらく、UNIX時間が記録されていると思われます。
UNIX時間は協定世界時(UTC)の1970年1月1日午前0時0分0秒からの経過秒数です。


== 参照
 * @<href>{https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_Supported_data_types.html,Amazon Redshift データベース開発者ガイド データ型}
 * @<href>{https://ja.wikipedia.org/wiki/UNIX%E6%99%82%E9%96%93,Wikipedia UNIX時間}

